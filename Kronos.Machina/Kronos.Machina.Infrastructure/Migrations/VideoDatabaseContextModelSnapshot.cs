// <auto-generated />
using System;
using Kronos.Machina.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kronos.Machina.Infrastructure.Migrations
{
    [DbContext(typeof(VideoDatabaseContext))]
    partial class VideoDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Kronos.Machina.Domain.Entities.VideoData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvailableImageQuality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Orientation")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("VideoFormatId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VideoFormatId");

                    b.ToTable("VideoData");
                });

            modelBuilder.Entity("Kronos.Machina.Domain.Entities.VideoFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("MandatorySignatureByteIndexes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Signature")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("VideoFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-123456789abc"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Extension = ".mp4",
                            IsSoftDeleted = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MandatorySignatureByteIndexes = "[4,5,6,7]",
                            Name = "MP4",
                            Signature = new byte[] { 0, 0, 0, 24, 102, 116, 121, 112 }
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Extension = ".avi",
                            IsSoftDeleted = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MandatorySignatureByteIndexes = "[0,1,2,3,8,9,10,11]",
                            Name = "AVI",
                            Signature = new byte[] { 82, 73, 70, 70, 0, 0, 0, 0, 65, 86, 73, 32 }
                        },
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Extension = ".mov",
                            IsSoftDeleted = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MandatorySignatureByteIndexes = "[4,5,6,7,8,9]",
                            Name = "MOV (QuickTime)",
                            Signature = new byte[] { 0, 0, 0, 20, 102, 116, 121, 112, 113, 116, 32, 32 }
                        },
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            CreatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Extension = ".mpeg",
                            IsSoftDeleted = false,
                            LastUpdatedAt = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MandatorySignatureByteIndexes = "[0,1,2,3]",
                            Name = "MPEG",
                            Signature = new byte[] { 0, 0, 1, 186 }
                        });
                });

            modelBuilder.Entity("Kronos.Machina.Domain.Entities.VideoUploadStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UploadStrategies");
                });

            modelBuilder.Entity("Kronos.Machina.Domain.Entities.VideoData", b =>
                {
                    b.HasOne("Kronos.Machina.Domain.Entities.VideoFormat", "VideoFormat")
                        .WithMany()
                        .HasForeignKey("VideoFormatId");

                    b.OwnsOne("Kronos.Machina.Domain.Entities.VideoUploadData", "UploadData", b1 =>
                        {
                            b1.Property<Guid>("VideoDataId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("State")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid?>("UploadStrategyId")
                                .HasColumnType("TEXT");

                            b1.HasKey("VideoDataId");

                            b1.HasIndex("UploadStrategyId");

                            b1.ToTable("VideoData");

                            b1.HasOne("Kronos.Machina.Domain.Entities.VideoUploadStrategy", "UploadStrategy")
                                .WithMany()
                                .HasForeignKey("UploadStrategyId");

                            b1.WithOwner()
                                .HasForeignKey("VideoDataId");

                            b1.OwnsOne("Kronos.Machina.Domain.Entities.BlobData", "BlobData", b2 =>
                                {
                                    b2.Property<Guid>("VideoUploadDataVideoDataId")
                                        .HasColumnType("TEXT");

                                    b2.Property<int?>("AudioBitrate")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("AudioChannels")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("AudioCodecName")
                                        .HasColumnType("TEXT");

                                    b2.Property<int?>("AudioSampleRate")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int?>("BitDepth")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("BlobId")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeSpan?>("Duration")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("FramesPerSecond")
                                        .HasColumnType("REAL");

                                    b2.Property<int?>("Height")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int?>("VideoBitrate")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("VideoCodecName")
                                        .HasColumnType("TEXT");

                                    b2.Property<int?>("Width")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("VideoUploadDataVideoDataId");

                                    b2.ToTable("VideoData");

                                    b2.WithOwner()
                                        .HasForeignKey("VideoUploadDataVideoDataId");

                                    b2.OwnsOne("Kronos.Machina.Domain.Entities.SanitizationData", "SanitizationData", b3 =>
                                        {
                                            b3.Property<Guid>("BlobDataVideoUploadDataVideoDataId")
                                                .HasColumnType("TEXT");

                                            b3.Property<int>("NextStageNumber")
                                                .HasColumnType("INTEGER");

                                            b3.Property<int>("State")
                                                .HasColumnType("INTEGER");

                                            b3.HasKey("BlobDataVideoUploadDataVideoDataId");

                                            b3.ToTable("VideoData");

                                            b3.WithOwner()
                                                .HasForeignKey("BlobDataVideoUploadDataVideoDataId");

                                            b3.OwnsOne("Kronos.Machina.Domain.Entities.BlobSanitizationHistory", "History", b4 =>
                                                {
                                                    b4.Property<Guid>("SanitizationDataBlobDataVideoUploadDataVideoDataId")
                                                        .HasColumnType("TEXT");

                                                    b4.Property<int>("_nextEntryIndex")
                                                        .ValueGeneratedOnAdd()
                                                        .HasColumnType("NextEntryIndex")
                                                        .HasDefaultValue(0);

                                                    b4.HasKey("SanitizationDataBlobDataVideoUploadDataVideoDataId");

                                                    b4.ToTable("VideoData");

                                                    b4.WithOwner()
                                                        .HasForeignKey("SanitizationDataBlobDataVideoUploadDataVideoDataId");

                                                    b4.OwnsMany("Kronos.Machina.Domain.Entities.BlobSanitizationHistoryEntry", "Entries", b5 =>
                                                        {
                                                            b5.Property<int>("_id")
                                                                .ValueGeneratedOnAdd()
                                                                .HasColumnType("INTEGER");

                                                            b5.Property<DateTimeOffset>("CreatedAt")
                                                                .HasColumnType("TEXT");

                                                            b5.Property<string>("Description")
                                                                .IsRequired()
                                                                .HasColumnType("TEXT");

                                                            b5.Property<bool>("IsSuccessful")
                                                                .HasColumnType("INTEGER");

                                                            b5.Property<int>("OrderNumber")
                                                                .HasColumnType("INTEGER");

                                                            b5.Property<Guid>("_historyId")
                                                                .HasColumnType("TEXT");

                                                            b5.HasKey("_id");

                                                            b5.HasIndex("_historyId");

                                                            b5.ToTable("BlobSanitizationHistoryEntry");

                                                            b5.WithOwner()
                                                                .HasForeignKey("_historyId");
                                                        });

                                                    b4.Navigation("Entries");
                                                });

                                            b3.Navigation("History")
                                                .IsRequired();
                                        });

                                    b2.Navigation("SanitizationData")
                                        .IsRequired();
                                });

                            b1.Navigation("BlobData")
                                .IsRequired();

                            b1.Navigation("UploadStrategy");
                        });

                    b.Navigation("UploadData")
                        .IsRequired();

                    b.Navigation("VideoFormat");
                });
#pragma warning restore 612, 618
        }
    }
}
